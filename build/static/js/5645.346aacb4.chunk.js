"use strict";(self.webpackChunkmy_rsk_wallet_app=self.webpackChunkmy_rsk_wallet_app||[]).push([[5645],{98059:(i,t,n)=>{n.d(t,{W:()=>s});var e=n(19064),o=n(13240);class s extends o.A{constructor(i){let{chains:t=e.k9b,options:n}=i;super(),this.chains=t,this.options=n}getBlockExplorerUrls(i){var t,n;const e=null!==(t=null===(n=i.explorers)||void 0===n?void 0:n.map((i=>i.url)))&&void 0!==t?t:[];return e.length>0?e:void 0}isChainUnsupported(i){return!this.chains.some((t=>t.chainId===i))}updateChains(i){this.chains=i}}},23939:(i,t,n)=>{function e(i){return"string"===typeof i?Number.parseInt(i,"0x"===i.trim().substring(0,2)?16:10):"bigint"===typeof i?Number(i):i}n.d(t,{n:()=>e})},35645:(i,t,n)=>{n.d(t,{MagicAuthConnector:()=>u});var e=n(80750),o=n(23939),s=n(26927),r=n(39917),a=n(14151),c=n(1817),h=n(98059);n(13240);class d extends h.W{constructor(i){super(i),(0,e._)(this,"id","magic-link"),(0,e._)(this,"name","Magic Link"),(0,e._)(this,"ready",!0),this.magicOptions=i.options}async getAccount(){const i=new s.j(await this.getProvider()).getSigner(),t=await i.getAddress();return t.startsWith("0x")?t:"0x".concat(t)}async getProvider(){if(this.provider)return this.provider;const i=this.getMagicSDK();return this.provider=i.rpcProvider,this.provider}async getSigner(){const i=new s.j(await this.getProvider());return await i.getSigner()}async isAuthorized(){const i=this.getMagicSDK();try{return await i.user.isLoggedIn()}catch(t){return!1}}onAccountsChanged(i){0===i.length?this.emit("disconnect"):i[0]&&this.emit("change",{account:r.getAddress(i[0])})}onChainChanged(i){const t=(0,o.n)(i),n=this.isChainUnsupported(t);this.emit("change",{chain:{id:t,unsupported:n}})}onDisconnect(){this.emit("disconnect")}async disconnect(){const i=this.getMagicSDK();await i.user.logout()}}class u extends d{constructor(i){var t,n;super(i),this.magicSdkConfiguration=i.options.magicSdkConfiguration,this._type=i.options.type,this.oauthProviders=(null===(t=i.options.oauthOptions)||void 0===t?void 0:t.providers)||[],this.oauthRedirectURI=null===(n=i.options.oauthOptions)||void 0===n?void 0:n.redirectURI}async connect(i){if(!this.magicOptions.apiKey)throw new Error("Magic API Key is not provided.");try{i.chainId&&this.initializeMagicSDK({chainId:i.chainId});const n=await this.getProvider();this.setupListeners(),this.emit("message",{type:"connecting"});const e=await this.isAuthorized();let o;try{o=await this.getChainId()}catch(t){o=0}if(this._connectedChainId=o,e)return{provider:n,chain:{id:o,unsupported:!1},account:await this.getAccount()};const s=this.getMagicSDK();if("connect"===this._type)("email"in i||"phoneNumber"in i)&&console.warn("Passing email or phoneNumber is not required for Magic Connect"),await s.wallet.connectWithUI();else if("oauthProvider"in i)await s.oauth.loginWithRedirect({provider:i.oauthProvider,redirectURI:this.oauthRedirectURI||window.location.href}),await new Promise((i=>{setTimeout(i,1e4)}));else if("email"in i)await s.auth.loginWithMagicLink({email:i.email,showUI:!0});else{if(!("phoneNumber"in i))throw new Error("Invalid options: Either provide and email, phoneNumber or oauthProvider when using Magic Auth");await s.auth.loginWithSMS({phoneNumber:i.phoneNumber})}const r=await this.getSigner();let a=await r.getAddress();return a.startsWith("0x")||(a="0x".concat(a)),{account:a,chain:{id:o,unsupported:!1},provider:n}}catch(n){throw console.error(n),new Error("Something went wrong")}}async getChainId(){var i;const t=null===(i=this.magicSdkConfiguration)||void 0===i?void 0:i.network;if("object"===typeof t){const i=t.chainId;if(i)return(0,o.n)(i)}throw new Error("Chain ID is not defined")}initializeMagicSDK(){let{chainId:i}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const t={...this.magicSdkConfiguration,extensions:[new a.lq]};if(i){const n=this.chains.find((t=>t.chainId===i));n&&(t.network={rpcUrl:n.rpc[0]||"",chainId:n.chainId})}return this.magicSDK=new c.qM(this.magicOptions.apiKey,t),this.provider=this.magicSDK.rpcProvider,this.magicSDK}getMagicSDK(){return this.magicSDK?this.magicSDK:this.initializeMagicSDK()}async setupListeners(){const i=await this.getProvider();i.on("accountsChanged",this.onAccountsChanged),i.on("chainChanged",this.onChainChanged),i.on("disconnect",this.onDisconnect)}async switchChain(i){const t=this.chains.find((t=>t.chainId===i));if(!t)throw new Error("Chain not found");return this._connectedChainId!==i&&this.initializeMagicSDK({chainId:i}),t}}}}]);
//# sourceMappingURL=5645.346aacb4.chunk.js.map