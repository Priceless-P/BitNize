{"version":3,"file":"static/js/2763.0f27abd6.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/embedded-wallet-e375380a.browser.esm.js","../node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js","../node_modules/@paperxyz/sdk-common-utilities/src/constants/blockchain.ts","../node_modules/@paperxyz/sdk-common-utilities/src/constants/settings.ts"],"sourcesContent":["/**\n * @internal\n */\nfunction normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { _ as _defineProperty } from './defineProperty-350fc508.browser.esm.js';\nimport { ChainToPublicRpc } from '@paperxyz/sdk-common-utilities';\nimport { Signer, getDefaultProvider } from 'ethers';\nimport { defineReadOnly } from 'ethers/lib/utils';\nimport { getDefaultGasOverrides } from '@thirdweb-dev/sdk';\n\n/**\n * @internal\n */\nconst EMBEDDED_WALLET_PATH = \"/sdk/2022-08-12/embedded-wallet\";\n/**\n * @internal\n */\nconst GET_IFRAME_BASE_URL = () => {\n  if (!!(localStorage.getItem(\"IS_THIRDWEB_DEV\") === \"true\")) {\n    return window.localStorage.getItem(\"THIRDWEB_DEV_URL\") ?? \"http://localhost:3000\";\n  }\n  return `https://embedded-wallet.thirdweb.com`;\n};\n/**\n * @internal\n */\nconst WALLET_USER_DETAILS_LOCAL_STORAGE_NAME = clientId => `thirdwebEwsWalletUserDetails-${clientId}`;\n\n/**\n * @internal\n */\nconst WALLET_USER_ID_LOCAL_STORAGE_NAME = clientId => `thirdwebEwsWalletUserId-${clientId}`;\n\n/**\n * @internal\n */\nconst AUTH_TOKEN_LOCAL_STORAGE_PREFIX = \"walletToken\";\n\n/**\n * @internal\n */\nconst AUTH_TOKEN_LOCAL_STORAGE_NAME = clientId => {\n  return `${AUTH_TOKEN_LOCAL_STORAGE_PREFIX}-${clientId}`;\n};\n\n/**\n * @internal\n */\nconst DEVICE_SHARE_LOCAL_STORAGE_PREFIX = \"a\";\n\n/**\n * @internal\n */\nconst DEVICE_SHARE_LOCAL_STORAGE_NAME = (clientId, userId) => `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}-${userId}`;\n\n/**\n * @internal\n */\nconst DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED = clientId => `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}`;\n\nlet RecoveryShareManagement = /*#__PURE__*/function (RecoveryShareManagement) {\n  RecoveryShareManagement[\"USER_MANAGED\"] = \"USER_MANAGED\";\n  RecoveryShareManagement[\"CLOUD_MANAGED\"] = \"AWS_MANAGED\";\n  return RecoveryShareManagement;\n}({});\nlet AuthProvider = /*#__PURE__*/function (AuthProvider) {\n  AuthProvider[\"COGNITO\"] = \"Cognito\";\n  AuthProvider[\"GOOGLE\"] = \"Google\";\n  AuthProvider[\"EMAIL_OTP\"] = \"EmailOtp\";\n  AuthProvider[\"CUSTOM_JWT\"] = \"CustomJWT\";\n  AuthProvider[\"CUSTOM_AUTH_ENDPOINT\"] = \"CustomAuthEndpoint\";\n  AuthProvider[\"FACEBOOK\"] = \"Facebook\";\n  AuthProvider[\"APPLE\"] = \"Apple\";\n  AuthProvider[\"PASSKEY\"] = \"Passkey\";\n  AuthProvider[\"EXTERNAL_WALLET\"] = \"ExternalWallet\";\n  AuthProvider[\"DISCORD\"] = \"Discord\";\n  return AuthProvider;\n}({});\n\n/**\n * @internal\n */\n\n// TODO: Clean up tech debt of random type Objects\n// E.g. StoredTokenType is really not used anywhere but it exists as this object for legacy reason\n\n// Class constructor types\n// types for class constructors still a little messy right now.\n// Open to PRs from whoever sees this and knows of a cleaner way to handle things\n\n// Auth Types\n\n// Embedded Wallet Types\nlet UserWalletStatus = /*#__PURE__*/function (UserWalletStatus) {\n  UserWalletStatus[\"LOGGED_OUT\"] = \"Logged Out\";\n  UserWalletStatus[\"LOGGED_IN_WALLET_UNINITIALIZED\"] = \"Logged In, Wallet Uninitialized\";\n  UserWalletStatus[\"LOGGED_IN_NEW_DEVICE\"] = \"Logged In, New Device\";\n  UserWalletStatus[\"LOGGED_IN_WALLET_INITIALIZED\"] = \"Logged In, Wallet Initialized\";\n  return UserWalletStatus;\n}({});\n\n/**\n * @internal\n */\n\n// ! Types seem repetitive, but the name should identify which goes where\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method iframe call\n\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method\n\nconst data = new Map();\nclass LocalStorage {\n  constructor(_ref) {\n    let {\n      clientId\n    } = _ref;\n    this.isSupported = !!window.localStorage;\n    this.clientId = clientId;\n  }\n  async getItem(key) {\n    if (this.isSupported) {\n      return window.localStorage.getItem(key);\n    } else {\n      return data.get(key) ?? null;\n    }\n  }\n  async setItem(key, value) {\n    if (this.isSupported) {\n      return window.localStorage.setItem(key, value);\n    } else {\n      data.set(key, value);\n    }\n  }\n  async removeItem(key) {\n    const item = await this.getItem(key);\n    if (this.isSupported && item) {\n      window.localStorage.removeItem(key);\n      return true;\n    }\n    return false;\n  }\n  async saveAuthCookie(cookie) {\n    await this.setItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId), cookie);\n  }\n  async getAuthCookie() {\n    return this.getItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async removeAuthCookie() {\n    return this.removeItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async saveDeviceShare(share, userId) {\n    await this.saveWalletUserId(userId);\n    await this.setItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId), share);\n  }\n  async getDeviceShare() {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.getItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId));\n    }\n    return null;\n  }\n  async removeDeviceShare() {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.removeItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId));\n    }\n    return false;\n  }\n  async getWalletUserId() {\n    return this.getItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async saveWalletUserId(userId) {\n    await this.setItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId), userId);\n  }\n  async removeWalletUserId() {\n    return this.removeItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n}\n\nfunction sleep(seconds) {\n  return new Promise(resolve => {\n    setTimeout(resolve, seconds * 1000);\n  });\n}\nconst iframeBaseStyle = {\n  height: \"100%\",\n  width: \"100%\",\n  border: \"none\",\n  backgroundColor: \"transparent\",\n  colorScheme: \"light\",\n  position: \"fixed\",\n  top: \"0px\",\n  right: \"0px\",\n  zIndex: \"2147483646\",\n  display: \"none\"\n};\n\n// Global var to help track iframe state\nconst isIframeLoaded = new Map();\nclass IframeCommunicator {\n  constructor(_ref) {\n    let {\n      link,\n      iframeId,\n      container = document.body,\n      iframeStyles,\n      onIframeInitialize\n    } = _ref;\n    _defineProperty(this, \"POLLING_INTERVAL_SECONDS\", 1.4);\n    this.iframeBaseUrl = GET_IFRAME_BASE_URL();\n\n    // Creating the IFrame element for communication\n    let iframe = document.getElementById(iframeId);\n    const hrefLink = new URL(link);\n    const sdkVersion = \"2.5.39\";\n    hrefLink.searchParams.set(\"sdkVersion\", sdkVersion);\n    if (!iframe || iframe.src !== hrefLink.href) {\n      // ! Do not update the hrefLink here or it'll cause multiple re-renders\n      if (!iframe) {\n        iframe = document.createElement(\"iframe\");\n        const mergedIframeStyles = {\n          ...iframeBaseStyle,\n          ...iframeStyles\n        };\n        Object.assign(iframe.style, mergedIframeStyles);\n        iframe.setAttribute(\"id\", iframeId);\n        iframe.setAttribute(\"fetchpriority\", \"high\");\n        container.appendChild(iframe);\n      }\n      iframe.src = hrefLink.href;\n      iframe.setAttribute(\"data-version\", sdkVersion);\n      const onIframeLoaded = event => {\n        if (event.data.eventType === \"ewsIframeLoaded\") {\n          window.removeEventListener(\"message\", onIframeLoaded);\n          if (!iframe) {\n            console.warn(\"thirdweb Iframe not found\");\n            return;\n          }\n          this.onIframeLoadHandler(iframe, onIframeInitialize)();\n        }\n      };\n      window.addEventListener(\"message\", onIframeLoaded);\n    }\n    this.iframe = iframe;\n  }\n  async onIframeLoadedInitVariables() {\n    return {};\n  }\n  onIframeLoadHandler(iframe, onIframeInitialize) {\n    return async () => {\n      const promise = new Promise(async (res, rej) => {\n        const channel = new MessageChannel();\n        channel.port1.onmessage = event => {\n          const {\n            data\n          } = event;\n          channel.port1.close();\n          if (!data.success) {\n            return rej(new Error(data.error));\n          }\n          isIframeLoaded.set(iframe.src, true);\n          if (onIframeInitialize) {\n            onIframeInitialize();\n          }\n          return res(true);\n        };\n        const INIT_IFRAME_EVENT = \"initIframe\";\n        iframe?.contentWindow?.postMessage(\n        // ? We initialise the iframe with a bunch\n        // of useful information so that we don't have to pass it\n        // through in each of the future call. This would be where we do it.\n        {\n          eventType: INIT_IFRAME_EVENT,\n          data: await this.onIframeLoadedInitVariables()\n        }, this.iframeBaseUrl, [channel.port2]);\n      });\n      await promise;\n    };\n  }\n  async call(_ref2) {\n    let {\n      procedureName,\n      params,\n      showIframe = false\n    } = _ref2;\n    while (!isIframeLoaded.get(this.iframe.src)) {\n      await sleep(this.POLLING_INTERVAL_SECONDS);\n    }\n    if (showIframe) {\n      this.iframe.style.display = \"block\";\n      // magic number to let the display render before performing the animation of the modal in\n      await sleep(0.005);\n    }\n    const promise = new Promise((res, rej) => {\n      const channel = new MessageChannel();\n      channel.port1.onmessage = async event => {\n        const {\n          data\n        } = event;\n        channel.port1.close();\n        if (showIframe) {\n          // magic number to let modal fade out before hiding it\n          await sleep(0.1);\n          this.iframe.style.display = \"none\";\n        }\n        if (!data.success) {\n          rej(new Error(data.error));\n        } else {\n          res(data.data);\n        }\n      };\n      this.iframe.contentWindow?.postMessage({\n        eventType: procedureName,\n        data: params\n      }, this.iframeBaseUrl, [channel.port2]);\n    });\n    return promise;\n  }\n\n  /**\n   * This has to be called by any iframe that will be removed from the DOM.\n   * Use to make sure that we reset the global loaded state of the particular iframe.src\n   */\n  destroy() {\n    isIframeLoaded.delete(this.iframe.src);\n  }\n}\n\nclass EmbeddedWalletIframeCommunicator extends IframeCommunicator {\n  constructor(_ref) {\n    let {\n      clientId,\n      customizationOptions\n    } = _ref;\n    super({\n      iframeId: EMBEDDED_WALLET_IFRAME_ID,\n      link: createEmbeddedWalletIframeLink({\n        clientId,\n        path: EMBEDDED_WALLET_PATH,\n        queryParams: customizationOptions\n      }).href,\n      container: document.body\n    });\n    this.clientId = clientId;\n  }\n  async onIframeLoadedInitVariables() {\n    const localStorage = new LocalStorage({\n      clientId: this.clientId\n    });\n    return {\n      authCookie: await localStorage.getAuthCookie(),\n      deviceShareStored: await localStorage.getDeviceShare(),\n      walletUserId: await localStorage.getWalletUserId(),\n      clientId: this.clientId\n    };\n  }\n}\n\n// This is the URL and ID tag of the iFrame that we communicate with\nfunction createEmbeddedWalletIframeLink(_ref2) {\n  let {\n    clientId,\n    path,\n    queryParams\n  } = _ref2;\n  const embeddedWalletUrl = new URL(`${path}`, GET_IFRAME_BASE_URL());\n  if (queryParams) {\n    for (const queryKey of Object.keys(queryParams)) {\n      embeddedWalletUrl.searchParams.set(queryKey, queryParams[queryKey]?.toString() || \"\");\n    }\n  }\n  embeddedWalletUrl.searchParams.set(\"clientId\", clientId);\n  return embeddedWalletUrl;\n}\nconst EMBEDDED_WALLET_IFRAME_ID = \"thirdweb-embedded-wallet-iframe\";\n\nclass AbstractLogin {\n  /**\n   * Used to manage the user's auth states. This should not be instantiated directly.\n   * Call {@link EmbeddedWalletSdk.auth} instead.\n   *\n   */\n  constructor(_ref) {\n    let {\n      querier,\n      preLogin,\n      postLogin,\n      clientId\n    } = _ref;\n    this.LoginQuerier = querier;\n    this.preLogin = preLogin;\n    this.postLogin = postLogin;\n    this.clientId = clientId;\n  }\n  async sendEmailLoginOtp(_ref2) {\n    let {\n      email\n    } = _ref2;\n    await this.preLogin();\n    const result = await this.LoginQuerier.call({\n      procedureName: \"sendThirdwebEmailLoginOtp\",\n      params: {\n        email\n      }\n    });\n    return result;\n  }\n  async sendSmsLoginOtp(_ref3) {\n    let {\n      phoneNumber\n    } = _ref3;\n    await this.preLogin();\n    const result = await this.LoginQuerier.call({\n      procedureName: \"sendThirdwebSmsLoginOtp\",\n      params: {\n        phoneNumber\n      }\n    });\n    return result;\n  }\n}\n\nclass BaseLogin extends AbstractLogin {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"closeWindow\", _ref => {\n      let {\n        isWindowOpenedByFn,\n        win,\n        closeOpenedWindow\n      } = _ref;\n      if (isWindowOpenedByFn) {\n        win?.close();\n      } else {\n        if (win && closeOpenedWindow) {\n          closeOpenedWindow(win);\n        } else if (win) {\n          win.close();\n        }\n      }\n    });\n  }\n  async getOauthLoginUrl(authProvider) {\n    const result = await this.LoginQuerier.call({\n      procedureName: \"getHeadlessOauthLoginLink\",\n      params: {\n        authProvider\n      }\n    });\n    return result;\n  }\n  async loginWithModal() {\n    await this.preLogin();\n    const result = await this.LoginQuerier.call({\n      procedureName: \"loginWithThirdwebModal\",\n      params: undefined,\n      showIframe: true\n    });\n    return this.postLogin(result);\n  }\n  async loginWithEmailOtp(_ref2) {\n    let {\n      email\n    } = _ref2;\n    await this.preLogin();\n    const result = await this.LoginQuerier.call({\n      procedureName: \"loginWithThirdwebModal\",\n      params: {\n        email\n      },\n      showIframe: true\n    });\n    return this.postLogin(result);\n  }\n  getOauthPopUpSizing(authProvider) {\n    switch (authProvider) {\n      case AuthProvider.FACEBOOK:\n        return \"width=715, height=555\";\n      default:\n        return \"width=350, height=500\";\n    }\n  }\n  async loginWithOauth(args) {\n    let win = args?.openedWindow;\n    let isWindowOpenedByFn = false;\n    if (!win) {\n      win = window.open(\"\", \"Login\", this.getOauthPopUpSizing(args.oauthProvider));\n      isWindowOpenedByFn = true;\n    }\n    if (!win) {\n      throw new Error(\"Something went wrong opening pop-up\");\n    }\n    // logout the user\n    // fetch the url to open the login window from iframe\n    const [{\n      loginLink\n    }] = await Promise.all([this.getOauthLoginUrl(args.oauthProvider), this.preLogin()]);\n    win.location.href = loginLink;\n    // listen to result from the login window\n    const result = await new Promise((resolve, reject) => {\n      // detect when the user closes the login window\n      const pollTimer = window.setInterval(async () => {\n        if (!win) {\n          return;\n        }\n        if (win.closed) {\n          clearInterval(pollTimer);\n          window.removeEventListener(\"message\", messageListener);\n          reject(new Error(\"User closed login window\"));\n        }\n      }, 1000);\n      const messageListener = async event => {\n        if (event.origin !== GET_IFRAME_BASE_URL()) {\n          return;\n        }\n        if (typeof event.data !== \"object\") {\n          reject(new Error(\"Invalid event data\"));\n          return;\n        }\n        switch (event.data.eventType) {\n          case \"userLoginSuccess\":\n            {\n              window.removeEventListener(\"message\", messageListener);\n              clearInterval(pollTimer);\n              this.closeWindow({\n                isWindowOpenedByFn,\n                win,\n                closeOpenedWindow: args?.closeOpenedWindow\n              });\n              if (event.data.authResult) {\n                resolve(event.data.authResult);\n              }\n              break;\n            }\n          case \"userLoginFailed\":\n            {\n              window.removeEventListener(\"message\", messageListener);\n              clearInterval(pollTimer);\n              this.closeWindow({\n                isWindowOpenedByFn,\n                win,\n                closeOpenedWindow: args?.closeOpenedWindow\n              });\n              reject(new Error(event.data.error));\n              break;\n            }\n          case \"injectDeveloperClientId\":\n            {\n              win?.postMessage({\n                eventType: \"injectDeveloperClientIdResult\",\n                developerClientId: this.clientId,\n                authOption: args.oauthProvider\n              }, GET_IFRAME_BASE_URL());\n              break;\n            }\n        }\n      };\n      window.addEventListener(\"message\", messageListener);\n    });\n    return this.postLogin({\n      storedToken: {\n        ...result.storedToken,\n        shouldStoreCookieString: true\n      },\n      walletDetails: {\n        ...result.walletDetails,\n        isIframeStorageEnabled: false\n      }\n    });\n  }\n  async loginWithCustomJwt(_ref3) {\n    let {\n      encryptionKey,\n      jwt\n    } = _ref3;\n    await this.preLogin();\n    const result = await this.LoginQuerier.call({\n      procedureName: \"loginWithCustomJwt\",\n      params: {\n        encryptionKey,\n        jwt\n      }\n    });\n    return this.postLogin(result);\n  }\n  async loginWithCustomAuthEndpoint(_ref4) {\n    let {\n      encryptionKey,\n      payload\n    } = _ref4;\n    await this.preLogin();\n    const result = await this.LoginQuerier.call({\n      procedureName: \"loginWithCustomAuthEndpoint\",\n      params: {\n        encryptionKey,\n        payload\n      }\n    });\n    return this.postLogin(result);\n  }\n  async verifyEmailLoginOtp(_ref5) {\n    let {\n      email,\n      otp,\n      recoveryCode\n    } = _ref5;\n    const result = await this.LoginQuerier.call({\n      procedureName: \"verifyThirdwebEmailLoginOtp\",\n      params: {\n        email,\n        otp,\n        recoveryCode\n      }\n    });\n    return this.postLogin(result);\n  }\n  async verifySmsLoginOtp(_ref6) {\n    let {\n      phoneNumber,\n      otp,\n      recoveryCode\n    } = _ref6;\n    const result = await this.LoginQuerier.call({\n      procedureName: \"verifyThirdwebSmsLoginOtp\",\n      params: {\n        phoneNumber,\n        otp,\n        recoveryCode\n      }\n    });\n    return this.postLogin(result);\n  }\n}\n\nclass Auth {\n  /**\n   * Used to manage the user's auth states. This should not be instantiated directly.\n   * Call {@link EmbeddedWalletSdk.auth} instead.\n   */\n  constructor(_ref) {\n    let {\n      clientId,\n      querier,\n      onAuthSuccess\n    } = _ref;\n    this.clientId = clientId;\n    this.AuthQuerier = querier;\n    this.localStorage = new LocalStorage({\n      clientId\n    });\n    this.onAuthSuccess = onAuthSuccess;\n    this.BaseLogin = new BaseLogin({\n      postLogin: async result => {\n        return this.postLogin(result);\n      },\n      preLogin: async () => {\n        await this.preLogin();\n      },\n      querier: querier,\n      clientId\n    });\n  }\n  async preLogin() {\n    await this.logout();\n  }\n  async postLogin(_ref2) {\n    let {\n      storedToken,\n      walletDetails\n    } = _ref2;\n    if (storedToken.shouldStoreCookieString) {\n      await this.localStorage.saveAuthCookie(storedToken.cookieString);\n    }\n    const initializedUser = await this.onAuthSuccess({\n      storedToken,\n      walletDetails\n    });\n    return initializedUser;\n  }\n\n  /**\n   * Used to log the user into their thirdweb wallet on your platform via a myriad of auth providers\n   *\n   * @example\n   * ```typescript\n   * const thirdwebEmbeddedWallet = new EmbeddedWalletSdk({clientId: \"YOUR_CLIENT_ID\", chain: \"Polygon\"})\n   * try {\n   *   const user = await thirdwebEmbeddedWallet.auth.loginWithModal();\n   *   // user is now logged in\n   * } catch (e) {\n   *   // User closed modal or something else went wrong during the authentication process\n   *   console.error(e)\n   * }\n   * ```\n   *\n   * @returns `{{user: InitializedUser}}` An InitializedUser object. See {@link EmbeddedWalletSdk.getUser} for more\n   */\n  async loginWithModal() {\n    return this.BaseLogin.loginWithModal();\n  }\n\n  /**\n   * Used to log the user into their thirdweb wallet using email OTP\n   *\n   * @example\n   * ```typescript\n   *  // Basic Flow\n   *  const thirdwebEmbeddedWallet = new EmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  try {\n   *    // prompts user to enter the code they received\n   *    const user = await thirdwebEmbeddedWallet.auth.loginWithThirdwebEmailOtp({ email : \"you@example.com\" });\n   *    // user is now logged in\n   *  } catch (e) {\n   *    // User closed the OTP modal or something else went wrong during the authentication process\n   *    console.error(e)\n   *  }\n   * ```\n   *\n   * @param args - args.email: We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @returns `{{user: InitializedUser}}` An InitializedUser object. See {@link EmbeddedWalletSdk.getUser} for more\n   */\n  async loginWithEmailOtp(args) {\n    return this.BaseLogin.loginWithEmailOtp(args);\n  }\n  async loginWithCustomJwt(args) {\n    return this.BaseLogin.loginWithCustomJwt(args);\n  }\n  async loginWithCustomAuthEndpoint(args) {\n    return this.BaseLogin.loginWithCustomAuthEndpoint(args);\n  }\n  async loginWithOauth(args) {\n    return this.BaseLogin.loginWithOauth(args);\n  }\n\n  /**\n   * A headless way to send the users at the passed email an OTP code.\n   * You need to then call {@link Auth.verifyEmailLoginOtp} in order to complete the login process\n   *\n   * @example\n   * ```typescript\n   *  const thirdwebEmbeddedWallet = new EmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  // sends user an OTP code\n   * try {\n   *    await thirdwebEmbeddedWallet.auth.sendEmailLoginOtp({ email : \"you@example.com\" });\n   * } catch(e) {\n   *    // Error Sending user's email an OTP code\n   *    console.error(e);\n   * }\n   *\n   * // Then when your user is ready to verify their OTP\n   * try {\n   *    const user = await thirdwebEmbeddedWallet.auth.verifyEmailLoginOtp({ email: \"you@example.com\", otp: \"6-DIGIT_CODE_HERE\" });\n   * } catch(e) {\n   *    // Error verifying the OTP code\n   *    console.error(e)\n   * }\n   * ```\n   *\n   * @param param0 - param0.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @returns `{{ isNewUser: boolean }}` IsNewUser indicates if the user is a new user to your platform\n   */\n  async sendEmailLoginOtp(_ref3) {\n    let {\n      email\n    } = _ref3;\n    return this.BaseLogin.sendEmailLoginOtp({\n      email\n    });\n  }\n  async sendSmsLoginOtp(_ref4) {\n    let {\n      phoneNumber\n    } = _ref4;\n    return this.BaseLogin.sendSmsLoginOtp({\n      phoneNumber\n    });\n  }\n\n  /**\n   * Used to verify the otp that the user receives from thirdweb\n   *\n   * See {@link Auth.sendEmailLoginOtp} for how the headless call flow looks like. Simply swap out the calls to `loginWithThirdwebEmailOtp` with `verifyThirdwebEmailLoginOtp`\n   *\n   * @param args - props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * props.otp The code that the user received in their email\n   * @returns `{{user: InitializedUser}}` An InitializedUser object containing the user's status, wallet, authDetails, and more\n   */\n  async verifyEmailLoginOtp(args) {\n    return this.BaseLogin.verifyEmailLoginOtp(args);\n  }\n  async verifySmsLoginOtp(args) {\n    return this.BaseLogin.verifySmsLoginOtp(args);\n  }\n\n  /**\n   * Logs any existing user out of their wallet.\n   * @returns `{{success: boolean}}` true if a user is successfully logged out. false if there's no user currently logged in.\n   */\n  async logout() {\n    const {\n      success\n    } = await this.AuthQuerier.call({\n      procedureName: \"logout\",\n      params: undefined\n    });\n    const isRemoveAuthCookie = await this.localStorage.removeAuthCookie();\n    const isRemoveUserId = await this.localStorage.removeWalletUserId();\n    return {\n      success: success || isRemoveAuthCookie || isRemoveUserId\n    };\n  }\n}\n\nclass EthersSigner extends Signer {\n  constructor(_ref) {\n    let {\n      provider,\n      clientId,\n      querier\n    } = _ref;\n    super();\n    _defineProperty(this, \"DEFAULT_ETHEREUM_CHAIN_ID\", 5);\n    this.clientId = clientId;\n    this.querier = querier;\n    // we try to extract a url if possible\n    this.endpoint = provider.connection?.url;\n    defineReadOnly(this, \"provider\", provider);\n  }\n  async getAddress() {\n    const {\n      address\n    } = await this.querier.call({\n      procedureName: \"getAddress\",\n      params: undefined\n    });\n    return address;\n  }\n  async signMessage(message) {\n    const {\n      signedMessage\n    } = await this.querier.call({\n      procedureName: \"signMessage\",\n      params: {\n        message,\n        chainId: (await this.provider?.getNetwork())?.chainId ?? this.DEFAULT_ETHEREUM_CHAIN_ID,\n        rpcEndpoint: this.endpoint\n      }\n    });\n    return signedMessage;\n  }\n  async signTransaction(transaction) {\n    const {\n      signedTransaction\n    } = await this.querier.call({\n      procedureName: \"signTransaction\",\n      params: {\n        transaction,\n        chainId: (await this.provider?.getNetwork())?.chainId ?? this.DEFAULT_ETHEREUM_CHAIN_ID,\n        rpcEndpoint: this.endpoint\n      }\n    });\n    return signedTransaction;\n  }\n  async sendTransaction(transaction) {\n    if (!this.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    const gas = await getDefaultGasOverrides(this.provider);\n    const txWithGas = {\n      ...gas,\n      ...transaction\n    };\n    return super.sendTransaction(txWithGas);\n  }\n  async _signTypedData(domain, types, message) {\n    const {\n      signedTypedData\n    } = await this.querier.call({\n      procedureName: \"signTypedDataV4\",\n      params: {\n        domain,\n        types,\n        message,\n        chainId: (await this.provider?.getNetwork())?.chainId ?? this.DEFAULT_ETHEREUM_CHAIN_ID,\n        rpcEndpoint: this.endpoint\n      }\n    });\n    return signedTypedData;\n  }\n  connect(provider) {\n    return new EthersSigner({\n      clientId: this.clientId,\n      provider,\n      querier: this.querier\n    });\n  }\n}\n\nclass EmbeddedWallet {\n  /**\n   * Not meant to be initialized directly. Call {@link initializeUser} to get an instance\n   */\n  constructor(_ref) {\n    let {\n      clientId,\n      chain,\n      querier\n    } = _ref;\n    this.clientId = clientId;\n    this.chain = chain;\n    this.walletManagerQuerier = querier;\n    this.localStorage = new LocalStorage({\n      clientId\n    });\n  }\n\n  /**\n   * @internal\n   * Used to set-up the user device in the case that they are using incognito\n   * @returns `{walletAddress : string }` The user's wallet details\n   */\n  async postWalletSetUp(_ref2) {\n    let {\n      deviceShareStored,\n      walletAddress,\n      isIframeStorageEnabled,\n      walletUserId\n    } = _ref2;\n    if (!isIframeStorageEnabled) {\n      await this.localStorage.saveDeviceShare(deviceShareStored, walletUserId);\n    }\n    return {\n      walletAddress\n    };\n  }\n\n  /**\n   * @internal\n   * Gets the various status states of the user\n   * @example\n   * ```typescript\n   *  const userStatus = await Paper.getUserWalletStatus();\n   *  switch (userStatus.status) {\n   *  case UserWalletStatus.LOGGED_OUT: {\n   *    // User is logged out, call one of the auth methods on Paper.auth to authenticate the user\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED: {\n   *    // User is logged in, but does not have a wallet associated with it\n   *    // you also have access to the user's details\n   *    userStatus.user.authDetails;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_NEW_DEVICE: {\n   *    // User is logged in and created a wallet already, but is missing the device shard\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *    // user is logged in and wallet is all set up.\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    userStatus.user.wallet;\n   *    break;\n   *  }\n   *}\n   *```\n   * @returns `{GetUserWalletStatusFnReturnType}` an object to containing various information on the user statuses\n   */\n  async getUserWalletStatus() {\n    const userStatus = await this.walletManagerQuerier.call({\n      procedureName: \"getUserStatus\",\n      params: undefined\n    });\n    if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED) {\n      return {\n        status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,\n        ...userStatus.user,\n        wallet: this\n      };\n    } else if (userStatus.status === UserWalletStatus.LOGGED_IN_NEW_DEVICE) {\n      return {\n        status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED,\n        ...userStatus.user\n      };\n    } else if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED) {\n      return {\n        status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED,\n        ...userStatus.user\n      };\n    } else {\n      // Logged out\n      return {\n        status: userStatus.status\n      };\n    }\n  }\n\n  /**\n   * Switches the chain that the user wallet is currently on.\n   *\n   * @example\n   * ```typescript\n   * // user wallet will be set to Polygon\n   * const Paper = new ThirdwebEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   * const user = await Paper.initializeUser();\n   * // Switch the user wallet to Mumbai\n   * await user.wallet.setChain({ chain: \"Mumbai\" });\n   * ```\n   * @param param0 - The chain that we are changing the user wallet too\n   */\n  async setChain(_ref3) {\n    let {\n      chain\n    } = _ref3;\n    this.chain = chain;\n  }\n\n  /**\n   * Returns an Ethers.Js compatible signer that you can use in conjunction with the rest of dApp\n   * @example\n   * ```typescript\n   * const Paper = new ThirdwebEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   * const user = await Paper.getUser();\n   * if (user.status === UserStatus.LOGGED_IN_WALLET_INITIALIZED) {\n   *    // returns a signer on the Polygon mainnet\n   *    const signer = await user.getEthersJsSigner();\n   *    // returns a signer on the specified RPC endpoints\n   *    const signer = await user.getEthersJsSigner({rpcEndpoint: \"https://eth-rpc.gateway.pokt.network\"});\n   * }\n   * ```\n   * @param network - object with the rpc url where calls will be routed through\n   * @throws If attempting to call the function without the user wallet initialize on their current device. This should never happen if call {@link ThirdwebEmbeddedWalletSdk.initializeUser} before accessing this function\n   * @returns A signer that is compatible with Ether.js. Defaults to the public rpc on the chain specified when initializing the {@link ThirdwebEmbeddedWalletSdk} instance\n   */\n  async getEthersJsSigner(network) {\n    const signer = new EthersSigner({\n      clientId: this.clientId,\n      provider: getDefaultProvider(network?.rpcEndpoint ?? ChainToPublicRpc[this.chain]),\n      querier: this.walletManagerQuerier\n    });\n    return signer;\n  }\n}\n\nclass EmbeddedWalletSdk {\n  /**\n   * Used to manage the Auth state of the user.\n   */\n\n  isClientIdLegacyPaper(clientId) {\n    if (clientId.indexOf(\"-\") > 0 && clientId.length === 36) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @example\n   * `const thirdwebEmbeddedWallet = new EmbeddedWalletSdk({ clientId: \"\", chain: \"Goerli\" });`\n   * @param param0 - EmbeddedWalletConstructorType\n   */\n  constructor(_ref) {\n    let {\n      clientId,\n      chain,\n      styles,\n      onAuthSuccess\n    } = _ref;\n    if (this.isClientIdLegacyPaper(clientId)) {\n      throw new Error(\"You are using a legacy clientId. Please use the clientId found on the thirdweb dashboard settings page\");\n    }\n    this.clientId = clientId;\n    this.querier = new EmbeddedWalletIframeCommunicator({\n      clientId,\n      customizationOptions: styles\n    });\n    this.wallet = new EmbeddedWallet({\n      clientId,\n      chain,\n      querier: this.querier\n    });\n    this.auth = new Auth({\n      clientId,\n      querier: this.querier,\n      onAuthSuccess: async authResult => {\n        onAuthSuccess?.(authResult);\n        await this.wallet.postWalletSetUp({\n          ...authResult.walletDetails,\n          walletUserId: authResult.storedToken.authDetails.userWalletId\n        });\n        await this.querier.call({\n          procedureName: \"initIframe\",\n          params: {\n            deviceShareStored: authResult.walletDetails.deviceShareStored,\n            clientId: this.clientId,\n            walletUserId: authResult.storedToken.authDetails.userWalletId,\n            authCookie: authResult.storedToken.cookieString\n          }\n        });\n        return {\n          user: {\n            status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,\n            authDetails: authResult.storedToken.authDetails,\n            wallet: this.wallet,\n            walletAddress: authResult.walletDetails.walletAddress\n          }\n        };\n      }\n    });\n  }\n\n  /**\n   * Gets the usr if they are logged in\n   * @example\n   * ```js\n   *  const user = await thirdwebEmbeddedWallet.getUser();\n   *  switch (user.status) {\n   *     case UserWalletStatus.LOGGED_OUT: {\n   *       // User is logged out, call one of the auth methods on thirdwebEmbeddedWallet.auth to authenticate the user\n   *       break;\n   *     }\n   *     case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *       // user is logged in and wallet is all set up.\n   *       // You have access to:\n   *       user.status;\n   *       user.authDetails;\n   *       user.walletAddress;\n   *       user.wallet;\n   *       break;\n   *     }\n   * }\n   * ```\n   * @returns GetUser - an object to containing various information on the user statuses\n   */\n  async getUser() {\n    return this.wallet.getUserWalletStatus();\n  }\n}\n\nexport { AUTH_TOKEN_LOCAL_STORAGE_NAME as A, DEVICE_SHARE_LOCAL_STORAGE_NAME as D, EmbeddedWalletSdk as E, RecoveryShareManagement as R, UserWalletStatus as U, WALLET_USER_DETAILS_LOCAL_STORAGE_NAME as W, DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED as a, WALLET_USER_ID_LOCAL_STORAGE_NAME as b, AuthProvider as c };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { utils } from 'ethers';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-1fb9aedf.browser.esm.js';\nimport { w as walletIds } from '../../../../dist/walletIds-dff6dced.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { E as EmbeddedWalletSdk, U as UserWalletStatus, c as AuthProvider } from '../../../../dist/embedded-wallet-e375380a.browser.esm.js';\nimport 'eventemitter3';\nimport '@paperxyz/sdk-common-utilities';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/sdk';\n\nclass EmbeddedWalletConnector extends Connector {\n  constructor(options) {\n    super();\n    _defineProperty(this, \"id\", walletIds.paper);\n    _defineProperty(this, \"name\", \"Embedded Wallet\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"user\", null);\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        await this.onDisconnect();\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.options.chains.findIndex(c => c.chainId === id) === -1;\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      this.emit(\"disconnect\");\n    });\n    this.options = options;\n  }\n  getEmbeddedWalletSDK() {\n    if (!this._embeddedWalletSdk) {\n      this._embeddedWalletSdk = new EmbeddedWalletSdk({\n        clientId: this.options.clientId,\n        chain: \"Ethereum\",\n        onAuthSuccess: this.options.onAuthSuccess\n      });\n    }\n    return this._embeddedWalletSdk;\n  }\n  async connect(args) {\n    // backwards compatibility - options should really be required here\n    if (!args) {\n      // default to iframe flow\n      const result = await this.authenticate({\n        strategy: \"iframe\"\n      });\n      if (!result.user) {\n        throw new Error(\"Error connecting User\");\n      }\n      this.user = result.user;\n    } else {\n      if (!args.authResult) {\n        throw new Error(\"Missing authData - call authenticate() first with your authentication strategy\");\n      }\n      if (!args.authResult.user) {\n        throw new Error(\"Missing authData.user - call authenticate() first with your authentication strategy\");\n      }\n      this.user = args.authResult.user;\n    }\n    if (args?.chainId) {\n      this.switchChain(args.chainId);\n    }\n    return this.getAddress();\n  }\n  async disconnect() {\n    const paper = this._embeddedWalletSdk;\n    await paper?.auth.logout();\n    this._signer = undefined;\n    this._embeddedWalletSdk = undefined;\n    this.user = null;\n  }\n  async getAddress() {\n    if (!this.user) {\n      throw new Error(\"Embedded Wallet is not connected\");\n    }\n    return await this.getSigner().then(signer => signer.getAddress());\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch (e) {\n      return false;\n    }\n  }\n  async getProvider() {\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n  async getSigner() {\n    if (this._signer) {\n      return this._signer;\n    }\n    const user = await this.getUser();\n    const signer = await user.wallet.getEthersJsSigner({\n      rpcEndpoint: this.options.chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    });\n    if (!signer) {\n      throw new Error(\"Signer not found\");\n    }\n    this._signer = signer;\n    return signer;\n  }\n  async isAuthorized() {\n    return false;\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Chain not configured\");\n    }\n    try {\n      // update chain in wallet\n      await this.user?.wallet.setChain({\n        chain: \"Ethereum\"\n      }); // just pass Ethereum no matter what chain we are going to connect\n      // update signer\n      this._signer = await this.user?.wallet.getEthersJsSigner({\n        rpcEndpoint: chain.rpc[0] || \"\"\n      });\n      this.emit(\"change\", {\n        chain: {\n          id: chainId,\n          unsupported: false\n        }\n      });\n    } catch (e) {\n      console.warn(\"Failed to switch chain\", e);\n    }\n  }\n  async setupListeners() {\n    return Promise.resolve();\n  }\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n  async getUser() {\n    if (!this.user || !this.user.wallet || !this.user.wallet.getEthersJsSigner // when serializing, functions are lost, need to rehydrate\n    ) {\n      const embeddedWalletSdk = this.getEmbeddedWalletSDK();\n      const user = await embeddedWalletSdk.getUser();\n      switch (user.status) {\n        case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED:\n          {\n            this.user = user;\n            break;\n          }\n        default:\n          {\n            // if logged out or unitialized, we can't get a signer, so throw an error\n            throw new Error(\"Embedded Wallet is not authenticated, please authenticate first\");\n          }\n      }\n    }\n    return this.user;\n  }\n  async getEmail() {\n    const user = await this.getUser();\n    return user.authDetails.email;\n  }\n  async getPhoneNumber() {\n    const user = await this.getUser();\n    return user.authDetails.phoneNumber;\n  }\n  async getRecoveryInformation() {\n    const user = await this.getUser();\n    return user.authDetails;\n  }\n  async sendVerificationEmail(_ref) {\n    let {\n      email\n    } = _ref;\n    const ewSDK = this.getEmbeddedWalletSDK();\n    return ewSDK.auth.sendEmailLoginOtp({\n      email\n    });\n  }\n  async sendVerificationSms(_ref2) {\n    let {\n      phoneNumber\n    } = _ref2;\n    const ewSDK = this.getEmbeddedWalletSDK();\n    return ewSDK.auth.sendSmsLoginOtp({\n      phoneNumber\n    });\n  }\n  async authenticate(params) {\n    const ewSDK = this.getEmbeddedWalletSDK();\n    const strategy = params.strategy;\n    switch (strategy) {\n      case \"email_verification\":\n        {\n          return await ewSDK.auth.verifyEmailLoginOtp({\n            email: params.email,\n            otp: params.verificationCode,\n            recoveryCode: params.recoveryCode\n          });\n        }\n      case \"phone_number_verification\":\n        {\n          return await ewSDK.auth.verifySmsLoginOtp({\n            phoneNumber: params.phoneNumber,\n            otp: params.verificationCode,\n            recoveryCode: params.recoveryCode\n          });\n        }\n      case \"apple\":\n      case \"facebook\":\n      case \"google\":\n        {\n          const oauthProvider = oauthStrategyToAuthProvider[strategy];\n          return ewSDK.auth.loginWithOauth({\n            oauthProvider,\n            closeOpenedWindow: params.closeOpenedWindow,\n            openedWindow: params.openedWindow\n          });\n        }\n      case \"jwt\":\n        {\n          return ewSDK.auth.loginWithCustomJwt({\n            jwt: params.jwt,\n            encryptionKey: params.encryptionKey\n          });\n        }\n      case \"auth_endpoint\":\n        {\n          return ewSDK.auth.loginWithCustomAuthEndpoint({\n            payload: params.payload,\n            encryptionKey: params.encryptionKey\n          });\n        }\n      case \"iframe_email_verification\":\n        {\n          return ewSDK.auth.loginWithEmailOtp({\n            email: params.email\n          });\n        }\n      case \"iframe\":\n        {\n          return ewSDK.auth.loginWithModal();\n        }\n      default:\n        assertUnreachable(strategy);\n    }\n  }\n}\nfunction assertUnreachable(x) {\n  throw new Error(\"Invalid param: \" + x);\n}\nconst oauthStrategyToAuthProvider = {\n  google: AuthProvider.GOOGLE,\n  facebook: AuthProvider.FACEBOOK,\n  apple: AuthProvider.APPLE\n};\n\nexport { EmbeddedWalletConnector };\n","export const ChainToPublicRpc: Record<Chain, string> = {\n  Ethereum: \"https://ethereum.rpc.thirdweb.com\",\n  Goerli: \"https://goerli.rpc.thirdweb.com\",\n  Mumbai: \"https://mumbai.rpc.thirdweb.com\",\n  Polygon: \"https://polygon.rpc.thirdweb.com\",\n  Avalanche: \"https://avalanche.rpc.thirdweb.com\",\n  Optimism: \"https://optimism.rpc.thirdweb.com\",\n  OptimismGoerli: \"https://optimism-goerli.rpc.thirdweb.com\",\n  BSC: \"https://binance.rpc.thirdweb.com\",\n  BSCTestnet: \"https://binance-testnet.rpc.thirdweb.com\",\n  ArbitrumOne: \"https://arbitrum.rpc.thirdweb.com\",\n  ArbitrumGoerli: \"https://arbitrum-goerli.rpc.thirdweb.com\",\n  Fantom: \"https://fantom.rpc.thirdweb.com\",\n  FantomTestnet: \"https://fantom-testnet.rpc.thirdweb.com\",\n  Sepolia: \"https://sepolia.rpc.thirdweb.com\",\n  AvalancheFuji: \"https://avalanche-fuji.rpc.thirdweb.com\",\n};\n\nexport const ChainIdToChain: Record<number, Chain> = {\n  1: \"Ethereum\",\n  5: \"Goerli\",\n  80001: \"Mumbai\",\n  137: \"Polygon\",\n  43114: \"Avalanche\",\n  10: \"Optimism\",\n  420: \"OptimismGoerli\",\n  56: \"BSC\",\n  97: \"BSCTestnet\",\n  42161: \"ArbitrumOne\",\n  421613: \"ArbitrumGoerli\",\n  250: \"Fantom\",\n  4002: \"FantomTestnet\",\n  11155111: \"Sepolia\",\n  43113: \"AvalancheFuji\",\n};\n\n// General Embedded wallet types\nexport type Chain =\n  | \"Polygon\"\n  | \"Mumbai\"\n  | \"Goerli\"\n  | \"Ethereum\"\n  | \"Avalanche\"\n  | \"Optimism\"\n  | \"OptimismGoerli\"\n  | \"BSC\"\n  | \"BSCTestnet\"\n  | \"ArbitrumOne\"\n  | \"ArbitrumGoerli\"\n  | \"Fantom\"\n  | \"FantomTestnet\"\n  | \"Sepolia\"\n  | \"AvalancheFuji\";\n\nexport type SupportedChainName = Chain | \"Rinkeby\" | \"Solana\" | \"SolanaDevnet\";\n","const isDev = (): boolean => {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.localStorage.getItem(\"IS_PAPER_DEV\") === \"true\"\n  );\n};\n\nconst isOldPaperDomain = (): boolean =>\n  typeof window !== \"undefined\" && window.location.origin.includes(\"paper.xyz\");\n\nconst isThirdwebDomain = (): boolean =>\n  typeof window !== \"undefined\" &&\n  window.location.origin.includes(\"thirdweb.com\");\n\nexport const getPaperOriginUrl = (): string => {\n  if (isDev())\n    return (\n      window.localStorage.getItem(\"PAPER_DEV_URL\") ?? \"http://localhost:3000\"\n    );\n\n  if (isOldPaperDomain()) return window.location.origin;\n  if (isThirdwebDomain()) return window.location.origin;\n\n  return \"https://withpaper.com\";\n};\n"],"names":["normalizeChainId","chainId","Number","parseInt","trim","substring","GET_IFRAME_BASE_URL","_window$localStorage$","localStorage","getItem","window","WALLET_USER_ID_LOCAL_STORAGE_NAME","clientId","concat","AUTH_TOKEN_LOCAL_STORAGE_NAME","DEVICE_SHARE_LOCAL_STORAGE_NAME","userId","AuthProvider","UserWalletStatus","data","Map","LocalStorage","constructor","_ref","this","isSupported","key","_data$get","get","setItem","value","set","removeItem","item","saveAuthCookie","cookie","getAuthCookie","removeAuthCookie","saveDeviceShare","share","saveWalletUserId","getDeviceShare","getWalletUserId","removeDeviceShare","removeWalletUserId","sleep","seconds","Promise","resolve","setTimeout","iframeBaseStyle","height","width","border","backgroundColor","colorScheme","position","top","right","zIndex","display","isIframeLoaded","IframeCommunicator","link","iframeId","container","document","body","iframeStyles","onIframeInitialize","_defineProperty","iframeBaseUrl","iframe","getElementById","hrefLink","URL","sdkVersion","searchParams","src","href","createElement","mergedIframeStyles","Object","assign","style","setAttribute","appendChild","onIframeLoaded","event","eventType","removeEventListener","console","warn","onIframeLoadHandler","addEventListener","onIframeLoadedInitVariables","async","promise","res","rej","_iframe$contentWindow","channel","MessageChannel","port1","onmessage","close","success","Error","error","contentWindow","postMessage","port2","call","_ref2","procedureName","params","showIframe","POLLING_INTERVAL_SECONDS","_this$iframe$contentW","destroy","delete","EmbeddedWalletIframeCommunicator","customizationOptions","super","EMBEDDED_WALLET_IFRAME_ID","createEmbeddedWalletIframeLink","path","queryParams","authCookie","deviceShareStored","walletUserId","embeddedWalletUrl","queryKey","keys","_queryParams$queryKey","toString","AbstractLogin","querier","preLogin","postLogin","LoginQuerier","sendEmailLoginOtp","email","sendSmsLoginOtp","_ref3","phoneNumber","BaseLogin","arguments","isWindowOpenedByFn","win","closeOpenedWindow","getOauthLoginUrl","authProvider","loginWithModal","result","undefined","loginWithEmailOtp","getOauthPopUpSizing","FACEBOOK","loginWithOauth","args","openedWindow","open","oauthProvider","loginLink","all","location","reject","pollTimer","setInterval","closed","clearInterval","messageListener","origin","closeWindow","authResult","_win","developerClientId","authOption","storedToken","shouldStoreCookieString","walletDetails","isIframeStorageEnabled","loginWithCustomJwt","encryptionKey","jwt","loginWithCustomAuthEndpoint","_ref4","payload","verifyEmailLoginOtp","_ref5","otp","recoveryCode","verifySmsLoginOtp","_ref6","Auth","onAuthSuccess","AuthQuerier","logout","cookieString","isRemoveAuthCookie","isRemoveUserId","EthersSigner","Signer","_provider$connection","provider","endpoint","connection","url","defineReadOnly","getAddress","address","signMessage","message","_await$this$provider$","_await$this$provider$2","_this$provider","signedMessage","getNetwork","DEFAULT_ETHEREUM_CHAIN_ID","rpcEndpoint","signTransaction","transaction","_await$this$provider$3","_await$this$provider$4","_this$provider2","signedTransaction","sendTransaction","txWithGas","getDefaultGasOverrides","_signTypedData","domain","types","_await$this$provider$5","_await$this$provider$6","_this$provider3","signedTypedData","connect","EmbeddedWallet","chain","walletManagerQuerier","postWalletSetUp","walletAddress","getUserWalletStatus","userStatus","status","LOGGED_IN_WALLET_INITIALIZED","user","wallet","LOGGED_IN_NEW_DEVICE","LOGGED_IN_WALLET_UNINITIALIZED","setChain","getEthersJsSigner","network","_network$rpcEndpoint","getDefaultProvider","ChainToPublicRpc","EmbeddedWalletSdk","isClientIdLegacyPaper","indexOf","length","styles","auth","authDetails","userWalletId","getUser","EmbeddedWalletConnector","Connector","options","walletIds","paper","accounts","onDisconnect","emit","account","utils","id","unsupported","chains","findIndex","c","getEmbeddedWalletSDK","_embeddedWalletSdk","authenticate","strategy","switchChain","disconnect","_signer","getSigner","then","signer","isConnected","e","getProvider","rpc","isAuthorized","find","_this$user","_this$user2","setupListeners","updateChains","embeddedWalletSdk","getEmail","getPhoneNumber","getRecoveryInformation","sendVerificationEmail","sendVerificationSms","ewSDK","verificationCode","oauthStrategyToAuthProvider","x","assertUnreachable","google","GOOGLE","facebook","apple","APPLE","o","Ethereum","Goerli","Mumbai","Polygon","Avalanche","Optimism","OptimismGoerli","BSC","BSCTestnet","ArbitrumOne","ArbitrumGoerli","Fantom","FantomTestnet","Sepolia","AvalancheFuji","n","getPaperOriginUrl","t","includes"],"sourceRoot":""}